<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleTotp</name>
    </assembly>
    <members>
        <member name="T:SimpleTotp.Base32Convert">
            <summary>
            Converts to/from Base32
            </summary>
            <remarks>
            <see href="https://en.wikipedia.org/wiki/Base32"/>
            </remarks>
        </member>
        <member name="F:SimpleTotp.Base32Convert.BlockLength">
            <summary>
            Length of the block in the Base32 conversion algorithm
            </summary>
        </member>
        <member name="F:SimpleTotp.Base32Convert.BitsInByte">
            <summary>
            Number of bits in byte (duh!) - used for readability only
            </summary>
        </member>
        <member name="F:SimpleTotp.Base32Convert.PaddingChar">
            <summary>
            Base32 padding character
            </summary>
        </member>
        <member name="F:SimpleTotp.Base32Convert.MaxPaddingLengthInBase32">
            <summary>
            Longest possible padding length in the Base32 algorithm
            </summary>
        </member>
        <member name="P:SimpleTotp.Base32Convert.Base32CharacterSet">
            <summary>
            Allowed characters for Base32
            </summary>
        </member>
        <member name="M:SimpleTotp.Base32Convert.ToBase32String(System.Byte[],System.Boolean)">
            <summary>
            Converts input byte array to a Base32 string.
            </summary>
            <param name="input">Input data</param>
            <param name="applyPadding">
            True if '=' padding should be added, false otherwise (default: true)
            <see href="https://tools.ietf.org/html/rfc3548"/>
            </param>
            <returns>Base32 string representation of the input data</returns>
        </member>
        <member name="M:SimpleTotp.Base32Convert.FromBase32String(System.String)">
            <summary>
            Converts input from a Base32 string to a byte array
            </summary>
            <param name="base32String">Base32 string</param>
            <returns>Decoded data</returns>
        </member>
        <member name="T:SimpleTotp.ITotpProvider">
            <summary>
            Simple TOTP algorithm provider
            </summary>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.GetAuthenticatorRegistrationData(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Calculates the data required for the user to add an account to TOTP authenticators
            </summary>
            <param name="accountName">
            Name of the account for which registration will be made
            <remarks>Has no functional impact in TOTP, but helps the user identify the account in their TOTP authenticator.</remarks>
            </param>
            <param name="issuer">
            Issuer of the TOTP secret key
            <remarks>Has no functional impact in TOTP, but helps the user identify the account in their TOTP authenticator.</remarks>
            </param>
            <param name="secretKey">User's secret TOTP key. Will be generated automatically if none provided.</param>
            <param name="prefixAccountNameWithIssuer">
            Allows controlling how the QR code uri is generated.
            True if account name should be prefixed with the issuer, false otherwise.
            Default - true (recommended).
            </param>
            <returns>Data required to add the specified account to TOTP authenticators</returns>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.GetCodeAtSpecificTime(System.String,System.DateTimeOffset)">
            <summary>
            Gets a TOTP code for a specific key at a given time point
            <remarks>This can be utilized to write your own TOTP authenticator or for testing your TOTP authentication</remarks>
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="time">
            Time point at which to generate the time-based code
            <remarks>Must be greater that the Unix Epoch time</remarks>
            </param>
            <returns>Generated TOTP code</returns>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.GetCodeAtSpecificTime(System.String,System.DateTimeOffset,System.TimeSpan@)">
            <summary>
            Gets a TOTP code for a specific key at a given time point
            <remarks>This can be utilized to write your own TOTP authenticator or for testing your TOTP authentication</remarks>
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="time">
            Time point at which to generate the time-based code
            <remarks>Must be greater that the Unix Epoch time</remarks>
            </param>
            <param name="remaining">Remaining time before the current code changes</param>
            <returns>Generated TOTP code</returns>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Checks if the provided TOTP code is valid, using default time tolerance
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="code">
            TOTP code
            <remarks>The code is a numeric string of length 6 (left-padded with 0s)</remarks>
            </param>
            <param name="time">Time when the code should be valid (plus/minus default tolerance)</param>
            <returns>True if the code is valid, false otherwise</returns>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Checks if the provided TOTP code is valid, using provided time tolerance
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="code">
            TOTP code
            <remarks>The code is a numeric string of length 6 (left-padded with 0s)</remarks>
            </param>
            <param name="time">
            Time when the code should be valid (plus/minus <paramref name="tolerance"/>)
            <remarks>Effective "window" of valid codes is <paramref name="time"/>-<paramref name="tolerance"/> to
            <paramref name="time"/>+<paramref name="tolerance"/></remarks>
            </param>
            <param name="tolerance">
            Specifies how far in the future/past will we look for valid codes to check the provided <paramref name="code"/> against.
            <remarks>
            This is used to negate the impact of time passing between user seeing the code and this code validating it.
            It also offsets the potential minor differences in clock time between the user's device and the server.
            </remarks>
            </param>
            <returns>True if the code is valid, false otherwise</returns>
        </member>
        <member name="M:SimpleTotp.ITotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.TimeSpan)">
            <summary>
            Checks if the provided TOTP code is valid, using provided time tolerance (past/future)
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="code">
            TOTP code
            <remarks>The code is a numeric string of length 6 (left-padded with 0s)</remarks>
            </param>
            <param name="time">
            Time when the code should be valid (plus/minus <paramref name="pastTolerance"/>/<paramref name="futureTolerance"/>)
            <remarks>Effective "window" of valid codes is <paramref name="time"/>-<paramref name="pastTolerance"/> to
            <paramref name="time"/>+<paramref name="futureTolerance"/></remarks>
            </param>
            <param name="pastTolerance">
            Specifies how far in the past will we look for valid codes to check the provided <paramref name="code"/> against.
            <remarks>
            This is used to negate the impact of time passing between user seeing the code and this code validating it.
            It also offsets the potential minor differences in clock time between the user's device and the server.
            </remarks>
            </param>
            <param name="futureTolerance">
            Specifies how far in the future will we look for valid codes to check the provided <paramref name="code"/> against.
            <remarks>
            This is used to negate the potential minor differences in clock time between the user's device and the server.
            </remarks>
            </param>
            <returns>True if the code is valid, false otherwise</returns>
        </member>
        <member name="T:SimpleTotp.RegistrationData">
            <summary>
            Information required for registering a secret Key
            </summary>
        </member>
        <member name="P:SimpleTotp.RegistrationData.SecretKey">
            <summary>
            User's secret TOTP key
            <remarks>
            This is the unencoded secret key that will subsequently be used to validate user TOTP codes.
            Because the key is actually needed to verify the user's code, only reversible encryption can be applied when persisting it.
            </remarks> 
            </summary>
        </member>
        <member name="P:SimpleTotp.RegistrationData.ManualRegistrationKey">
            <summary>
            Base32-encoded format of the user's secret TOTP key
            <remarks>
            Most authenticators will require the user's TOTP key to be manually input in Base32.
            </remarks>
            </summary>
        </member>
        <member name="P:SimpleTotp.RegistrationData.Issuer">
            <summary>
            Issuer of the TOTP secret key
            </summary>
        </member>
        <member name="P:SimpleTotp.RegistrationData.AccountName">
            <summary>
            Name of the account for which the secret key was generated
            </summary>
        </member>
        <member name="P:SimpleTotp.RegistrationData.QrCodeUri">
            <summary>
            Uri to be encoded in a QR code for automatic authenticator registration
            </summary>
        </member>
        <member name="T:SimpleTotp.TotpProvider">
            <inheritdoc />
        </member>
        <member name="F:SimpleTotp.TotpProvider.UnixEpochInTicks">
            <summary>
            Unix Epoch time - in ticks
            </summary>
        </member>
        <member name="F:SimpleTotp.TotpProvider.Period">
            <summary>
            Period for which the same code should be calculated - 30 seconds (in ticks)
            <remarks>
            TOTP specification allows this to be customized; most existing authenticators use a static value of 30 seconds - hence a const
            </remarks>
            </summary>
        </member>
        <member name="F:SimpleTotp.TotpProvider.CodeDigits">
            <summary>
            Number of digits in generated TOTP code
            <remarks>
            TOTP specification allows this to be customized; most existing authenticators use a static value of 6 digits - hence a const
            </remarks>
            </summary>
        </member>
        <member name="F:SimpleTotp.TotpProvider.DefaultTolerance">
            <summary>
            Default tolerance for TOTP code validation
            </summary>
        </member>
        <member name="M:SimpleTotp.TotpProvider.GetAuthenticatorRegistrationData(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.GetCodeAtSpecificTime(System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.GetCodeAtSpecificTime(System.String,System.DateTimeOffset,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.ValidateCode(System.String,System.String,System.DateTimeOffset,System.TimeSpan,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SimpleTotp.TotpProvider.GetValidCodesForPeriod(System.String,System.DateTimeOffset,System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a collection of valid codes between (<paramref name="time"/> - <paramref name="pastTolerance"/>)
            and (<paramref name="time"/> + <paramref name="futureTolerance"/>).
            </summary>
            <param name="secretKey">User's secret TOTP key</param>
            <param name="time">Reference point in time for specifying the valid time period (usually: current time)</param>
            <param name="pastTolerance">Specified how far to the past will the valid period reach</param>
            <param name="futureTolerance">Specified how far to the future will the valid period reach</param>
            <returns>A collection of valid TOTP codes</returns>
        </member>
        <member name="M:SimpleTotp.TotpProvider.CalculateCode(System.Byte[],System.Int64)">
            <summary>
            Gets a TOTP code based on a secret and a counter
            </summary>
            <param name="secretKeyBytes">User's secret TOTP key as byte array</param>
            <param name="counter">TOTP counter</param>
            <returns>TOTP code</returns>
        </member>
        <member name="M:SimpleTotp.TotpProvider.CalculateCounter(System.DateTimeOffset)">
            <summary>
            Calculates the counter used to determine the time-based factor in the TOTP code
            </summary>
            <param name="time">Time for which the counter is calculated</param>
            <returns>TOTP counter</returns>
        </member>
        <member name="T:SimpleTotp.ValidationHelper">
            <summary>
            Internal class for easier param validation
            </summary>
        </member>
        <member name="M:SimpleTotp.ValidationHelper.CheckNotNullOrWhitespace(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Checks if the provided expression results in a null or whitespace string. Throws an ArgumentException if it does.
            </summary>
            <param name="expression">Expression to check against a null/whitespace string</param>
        </member>
    </members>
</doc>
